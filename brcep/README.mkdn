# BrCep

## O que é?

O BrCep é um gem que tem como objetivo buscar um endereço com base no seu CEP. Para isso ele utiliza dois web services:

* Bronze Business
* Buscar CEP

Primeiro o endereço é procurado no web service da Bronze Business, e caso não ache o endereço lá, ou caso este web service esteja indisponível, o endereço será então procurado no web service do Buscar CEP. Portanto, o endereço tem duas chances para ser encontrado, sendo mais difícil o serviço de busca de endereço por CEP estar indisponível ou não encontrar o endereço.

## Como usar?

No seu Gemfile:
        gem "brcep"

Gere o arquivo de configuração:
        rails g br_cep:install

##  Configurando
Na sua pasta config será criado um arquivo com nome br_cep.rb:

        BrCep.setup do |config|
          #Caso precise de proxy basta habilitar as opções
          #config.proxy_address = "example.com"
          #config.proxy_port = 80

          #Define o retorno caso o formato do cep seja inválido
          #:throw lançará uma exception
          #:nil retornará nil
          config.cep_invalido = :throw

          #Define o retorno caso os serviços de busca estejam indisponíveis
          #:throw lançará uma exception
          #nil retornará nil
          config.servico_indisponivel = :throw
        end

As configurações são bem simples possibilitando:

* Customizar o uso de proxy: config.proxy_address e config.proxy_port
* Customizar o retorno caso o CEP seja inválido: config.cep_invalido, aceitando :throw(eception) e :nil(retorna nil)
* Customizar o retorno caso o serviço de busca esteja indisponível: config.servico_indisponivel, aceitando :throw(eception) e :nil(retorna nil)

## Utilizando

        Cep.find(22640100)     ==> ['Avenida', 'das Americas', 'Barra da Tijuca', 'RJ', 'Rio de Janeiro', 22640100]
        Cep.find('22640100')   ==> ['Avenida', 'das Americas', 'Barra da Tijuca', 'RJ', 'Rio de Janeiro', 22640100]
        Cep.find('22640-100')  ==> ['Avenida', 'das Americas', 'Barra da Tijuca', 'RJ', 'Rio de Janeiro', 22640100]
        Cep.find('22.640-100') ==> ['Avenida', 'das Americas', 'Barra da Tijuca', 'RJ', 'Rio de Janeiro', 22640100]

## O que acontece se o CEP informado tiver um formato inválido?

        Cep.find('00000000')   ==> RuntimeError 'O CEP informado possui um formato inválido.'

## E se os dois web services estiverem indisponíveis?

        Cep.find('22.640-100') ==> RuntimeError, "A busca de endereço por CEP está indisponível no momento."

## E se por acaso o CEP não for encontrado em nenhum dos dois web services:

        Cep.find('12345678') ==> RuntimeError, "CEP 12345678 não encontrado."

Todas opções acima podem ser modificadas no arquivo de configuração config/br_cep.rb

P.S.: Nesse caso o endereço não foi encontrado porque não existe um endereço associado ao CEP 12345678. No entanto, pode haver situações em que CEPs que possuem endereços associados não tenham os seus endereços encontrados, no entanto, até o momemnto os dois web services utilizados cobrem todas os CEPs testados na prática.
